<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head><title>Генератор PDF документов, основанный на TCPDF/FPDF
</title>
<meta http-equiv="content-type" content="text/html; charset=windows-1251">
<link rel="stylesheet" type="text/css" href="helpstyles.css">
</head>
<body>
<!-- DOC BEGIN -->

<h3>Генератор PDF документов, основанный на TCPDF/FPDF</h3>

Генерацию PDF файлов на сегодня могут предложить несколько известных PHP-библиотек,
таких как Zend Framework (Zend_Pdf), FPDF, TCPDF, однако для такой задачи, как
"быстрое" создание печатной формы на основе готового PDF-шаблона, ни один из найденных
в "чистом виде" не подходит.

<br /><br />
Предлагаемый класс CPrintfromPdf служит для автоматизации создания "печатных
форм" в формате PDF, на основе подготовленных PDF-шаблонов и пользовательских данных.

<br />Класс является "оберткой" (wrapper) над модулями известного набора TCPDF, (выбранного за наиболее
полный функционал и хорошую поддержку), со вспомогательными классами FPDF / FPDFI,
необходимыми для импорта "образцовых" PDF-файлов.

<br><br>Основные возможности класса:
<ul>
  <li>использование "образцовых" PDF файлов в качестве шаблонов</li>
  <li>настраиваемый вывод значений полей формы в нужные позиции на листе,
     параметры настройки при этом хранятся в отдельном XML файле</li>
  <li>вывод в указанные координаты графических файлов (что бывает необходимо для печати факсимильных оттисков штампов, подписей и т.д.)</li>
  <li>вывод штрих-кодов и QR-кодов </li>
  <li>Возможность формирования нескольких "документов"  в выходном PDF файле (например, нескольких "писем клиентам", или договоров для нескольких людей)
    на основе одного шаблона и нескольких блоков пользовательских данных</li>
  <li>Размножение блока данных на листе (печать визитных карт и т.п.) </li>
  <li>несколько дополнительных бонус-функций (генерация разлинованного листа, листа нотной бумаги, и головоломки Судоку)</li>
  <li>(с версии 1.1) поддержка <a href="#plugins">плагинов</a> для реализации новых графических возможностей</li>
  <li>(с версии 1.4) поля, выводимые на все страницы документа (выод логотипов, штрих-кодов, и т.д.)</li>

</ul>


<h4>Установка модуля на web сервер</h4>
Кроме собственно модуля <b>printform-pdf.php</b>, который надо скопировать в одну из папок, перечисленных в include_path
 Ваших php-настроек, необходимо скачать из интернета и установить на сервер следующие бесплатно распространяемые библиотеки:
 <ol>
   <li>TCPDF - набор классов для генерации PDF файлов. Ссылка: <a href="http://tcpdf.org" target="_blank">tcpdf.org</a></li>
   <li>Дополнительные модули FPDF-FPDFI, необходимые для поддержки чтения-импорта PDF шаблонов. Ссылка: <a href="http://www.setasign.de/products/pdf-php-solutions/fpdi/downloads/" target="_blank">http://www.setasign.de/</a></li>
   <li>Если планируется генерация пазлов судоку, нужно скачать и установить модуль <a href="http://www.phpclasses.org/package/2674-PHP-Generate-and-solve-sudoku-puzzles.html">class.Sudoku.php</a>
   </li>
 </ol>
 После установки этих модулей на свой сервер, надо сгенерировать и положить в папку tcpdf/fonts комплекты необходимых "шрифтовых" файлов.
 <br>Утилита генерации и инструкция по работе с ней может быть найдена в папке fonts/utils комплекта TCPDF.
 <br>Учтите, генерировать надо будет комплекты для всех шрифтов, которые вы собираетесь использовать в формируемых PDF файлах.
 Базовым шрифтом для CPrintformPDF по умолчанию является arial, так что если не планируется менять его на другой, набор шрифтовых файлов arial
 для Вашего языка должен быть создан и положен в папку tcpdf/fonts в первую очередь.

<h4>Использование класса</h4>

Ниже представлен простейший пример генерации PDF на основе подготовленного PDF-файла шаблона 'pdf-template.pdf':
<pre>if(!class_exists('TCPDF',false)) {
    require_once('tcpdf/config/lang/rus.php'); // Подключаем использование своего языкового пакета, здесь - русского
    require_once 'tcpdf/tcpdf.php';
    require_once 'fpdf/fpdi2tcpdf_bridge.php';
    require_once 'fpdf/fpdi.php';
}
require_once('printform-pdf.php');

$xmlcfg = "pdf-config.xml";

$pdf = new CPrintFormPdf(array(
    'configfile' =&gt; $xmlcfg
   ,'outname' =&gt; "output-file.pdf"
   ,'author'  =&gt; 'Some clever guy'
   ,'creator' =&gt; 'Test program'
   ,'title'   =&gt; 'Generated test PDF'
   ,'subject' =&gt; 'Testing PDF creation filled by user data'
   ,'compression' =&gt; true
));

$userdata = array(
    'cityname' =&gt; 'Moscow'
   ,'personname' =&gt; 'Dow'
   ,'person_firstname' =&gt; 'John'
   ,'person_birthdate' =&gt; '04/15/1970'
   ,'person_document' =&gt; 'Passport 0034 010203'
   ,'demostring' =&gt; 'DEMONSTATION!'
);
$pdf-&gt;AddData($userdata);
$pdf-&gt;Render(); // генерация в поток клиенту, браузер предложит открыть/сохранить PDF файл
</pre>

<h4>Формат настроечного XML-файла</h4>
Ниже приводится образец заполненного XML файла с настройками, включая список выводимых полей с данными.
(в нашем примере это <b>pdf-config.xml</b>).

<pre>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;printdef&gt;
  &lt;version&gt;1.0&lt;/version&gt;
  &lt;title&gt;Testing PDF generation&lt;/title&gt;
  &lt;description&gt;This is a test PDF document created by CPrintfromPDF class&lt;/description&gt;
  &lt;stringcharset&gt;UTF-8&lt;/stringcharset&gt;

  &lt;baseparameters&gt;
    &lt;margins left="0" top="0" right="0" bottom="0" /&gt;
    &lt;font name="arial" size="6" /&gt;
    &lt;page orientation="P" size="A4" units="mm" /&gt;
    &lt;template src="pdf-template.pdf" altsrc="pdf-template-alternate.pdf" /&gt;
  &lt;/baseparameters&gt;

  &lt;pages&gt;
   &lt;page&gt;
      &lt;template page="1" /&gt;
      &lt;field name="cityname" posx="143" posy="26" /&gt;
      &lt;field name="personname" posx="42" posy="26" /&gt;
      &lt;field name="person_firstname" posx="88" posy="26" width="20" /&gt;
      &lt;field name="person_birthdate" posx="42" posy="32" width="70" /&gt;
      &lt;field name="person_document" posx="143" posy="32" width="55" /&gt;
      &lt;field name="demostring"     posx="50"  posy="110" rotate="45" size="40" color="#EE4040"/&gt;
   &lt;/page&gt;
  &lt;/pages&gt;
&lt;/printdef&gt;
</pre>

Как видим, XML код в файле конфигурации помимо нескольких основных тегов (title,description, stringcharset) состоит из секций <b>baseparameters</b> и <b>pages</b>.

<br><b>baseparameters</b> содержит основные параметры страницы, действующие на весь PDF документ.
<br><br>
Тег <b>templatefile</b> в секции "baseparameters" содержит имя исходного PDF файла шаблона, который будет использован как "фон" при генерации конечного документа
(атрибут <b>src</b>), и необязательное имя альтернативного PDF шаблона (атрибут <b>altsrc</b>). Для чего это, узнаем позже.

<br>В секции <b>pages</b> задаются блоки &lt;page&gt; ... &lt;/page&gt;, хранящие координаты, размеры шрифта и другие параметры для вывода пользовательских данных и файлов изображений
на данной странице документа.

<p>
Помимо списка полей, блок описания страницы может содеражать один специальный элемент : <b>datagrid</b>, упрощающий вывод однотипных данных в таблицу.
<br>Допустим, вам нужно напечатать на PDF-странице таблицу (до 30 строк) с данными сотрудников, для каждого из них выводя его ФИО, дату рождения и зарплату.
<br>Чтобы сделать это "обычным" способом, пришлось бы готовить длинный XML с описанием всех 30 блоков по 3 поля в каждом :
<pre>
  ...
  &lt;page&gt;
      &lt;field name="emp_name1" posx="10" posy="26" /&gt;
      &lt;field name="emp_birthdate1" posx="50" posy="26" /&gt;
      &lt;field name="emp_duty1" posx="80" posy="26" /&gt;
      &lt;field name="emp_salary1" posx="120" posy="26" /&gt;

      &lt;field name="emp_name2" posx="10" posy="32" /&gt;
      &lt;field name="emp_birthdate2" posx="50" posy="32" /&gt;
      &lt;field name="emp_duty2" posx="80" posy="32" /&gt;
      &lt;field name="emp_salary2" posx="120" posy="32" /&gt;
      /**... and so on **/
  &lt;/page&gt;
  ...
</pre>

<br>"datagrid" позволяет сдлеать это "немного" проще:
<pre>
  ...
  &lt;page&gt;
      &lt;field name="emp_name" posx="10" /&gt;
      &lt;field name="emp_birthdate" posx="50" /&gt;
      &lt;field name="emp_duty" posx="80" /&gt;
      &lt;field name="emp_salary" posx="120" /&gt;
      &lt;datagrid name="empl_grid" fields="emp_name,emp_birthdate,emp_duty,emp_salary" posy="26" step_y="6" rows="30" /&gt;
  &lt;/page&gt;
  ...
</pre>

В теге "<b>datagrid</b>" задаются следующие атрибуты : <ul>
    <li>"<b>name</b>" - уникальное имя (ИД) таблицы</li>
    <li>"<b>fields</b>" - список имен ранее объявленных полей, входящих в "грид" (разеделенный запятыми), </li>
    <li>"<b>posx</b>" - горизонтальная позиция (смещение таблицы) - это значение добавляется к X-позициям всех полей внутри таблицы.
    <li>"<b>posy</b>" - вертикальная позиция (отсюда начнется печать первой строки таблицы)</li>
    <li>"<b>step_y</b>" - шаг по вертикали - расстоние до следующей строки таблицы</li>
    <li>"<b>rows</b>" - максимальное число строк данных в таблице (следите, чтобы таблица не вылезла за границы листа!)</li>
</ul>

Помните, что в XML файле описания тег datagrid должен быть ПОСЛЕ описаний полей, которые в него войдут !

<br><br>
В скрипте генерации PDF документа, чтобы заполнить "грид" данными, можно воспользоваться любым из способов:
<ol>
  <li>Честно заполнить массив данных для метода AddData($data) всеми "нумерованными" парами данных ключ=&gt;значение:<br>
  <pre>$data[emp_name1'] = 'Joshua Gordon';
$data['emp_birth1'] = '1980-04-20';
...
$data['emp_name2'] = 'Alex Johnson';
$data['emp_birth2'] = '1975-10-09';
...
$pdf-&gt;AddData($data);
</pre>

  </li>
  <li>Занести в основной массив $data все поля кроме таблицы, вызвать метод AddData($data), а после этого вызвать метод AddDataGridRow():<br><br>
<pre>// мы считаем, что каждый элемент массива  $employees - это ассоциативный массив с необходимыми значениями
$pdf-&gt;AddData($data);
foreach($employees as $oneempl) {
  $pdf-&gt;AddDataGridRow('empl_grid', $oneempl);
}
</pre>
  AddDataGridRow() заполняет одну строку таблицы и может быть вызван столько раз, сколько у вас есть фактических данных (в нашем примере - сотрудников).
  </li>

  <li>Все данные для "грида" могут быть переданы как особый элемент массива $data для метода AddData().<br>
  Для этого используется специальное имя (ключ) поля в массиве, оно начинается с префикса 'grid:', за которым следует имя (ИД) нашего описания таблицы:
  <br>
  <pre>$data['grid:empl_grid'] = array(
     array('emp_name'=&gt;'Joshua Gordon', 'emp_birth'=&gt;'1980-04-20')
    ,array('emp_name'=&gt;'Alex Johnson', 'emp_birth'=&gt;'1975-10-09')
);
$pdf-&gt;AddData($data);
$pdf-&gt;Render();
  </pre>
  </li>
</ol>
Во всех трех случаях результат будет одинаковый.

<h4>Дополнительные возможности</h4>

Кроме собственно "форматированного вывода", в класс CPRintformPdf были добавлены функции печати "специальных"
страниц :
<ul>
  <li>"разлинованного" листа в клетку/полоску <a href="#AddPageLined">AddPageLined()</a>,</li>
  <li>чистого нотного листа - <a href="#AddPageMusicStaff">AddPageMusicStaff()</a> (учащимся музыкальных школ можно не покупать нотные тетради, если у папы есть компьютер и принтер :) ),</li>
  <li>и странички популярной головоломки (пазла) Судоку - см.метод <a href="#AddPageSudoku">AddPageSudoku()</a>.</li>
</ul>

<h4>Описание методов класса</h4>

Конструктор класса может принимать следующие параметры:

<br><br>CPrintformPDF($param='', $data=null, $outname='', $tofile=false),
<br>$param может строкой с именем XML-файла конфигурации ЛИБО ассоциативным массивом ('ключ'=&gt;значение) :
<table>
  <tr><th>Ключ</th><th>Назначение</th><th>значение по умолчанию</th>
  </tr>
  <tr class="odd">
    <td>template</td>
    <td>Имя файла шаблона</td>
    <td>--</td>
  </tr>
  <tr>
    <td>data</td><td>ассоциативный массив пользовательских данных</td><td>--</td>
  </tr>
  <tr class="odd">
    <td>outname</td><td>имя выходного PDF файла</td><td>--</td>
  </tr>

  <tr>
    <td>compression</td>
    <td>включает режим генерации компрессированного PDF (в PHP должна быть включена поддержка функций ZIP !)</td>
    <td>false</td>
  </tr>

  <tr class="odd">
    <td>tofile</td>
    <td>если указать любое непустое значение, сгенерированный PDF документ будет сохранен (на сервере) в файл с именем, указанным в параметре <b>outname</b></td>
    <td>false</td>
  </tr>

  <tr>
    <td>configfile</td>
    <td>передает имя XML-файла конфигурации</td>
    <td>&nbsp;</td>
  </tr>

  <tr class="odd">
    <td>subject</td>
    <td>строка для поля "Тема" (subject) в PDF документе</td>
    <td>пустая строка</td>
  </tr>

  <tr>
    <td>author</td>
    <td>строка для поля "Автор" (Author) в PDF документе</td>
    <td>CPrintFormPdf, TCPDF wrapper class</td>
  </tr>

  <tr class="odd">
    <td>creator</td>
    <td>строка для поля "Кем создано" (Creator) в PDF документе</td>
    <td>printform-pdf module ...</td>
  </tr>

  <tr>
    <td>stringcharset</td>
    <td>Кодировка исходных строковых значений в массиве переданных данных. Нужна, чтобы корректно вывести строки имевшие кодировку отличную от UTF-8,
    и должна быть одной из поддерживаемых PHP-функцией <b>iconv()</b>.
    Кодировку можно не задавать, если выводимые данные будут передаваться в UTF-8</td>
    <td>''</td>
  </tr>

</table>

Ниже - полное описание всех настроечных параметров XML файла конфигурации, (либо строки, содержащей XML код), передаваемого в конструктор класса.
<br><br>
<table width="100%">
  <tr>
    <th>Параметр</th><th colspan="2">Назначение</th><th>Значение по умолчанию</th>
  </tr>
  <tr>
    <td><b>stringcharset</b></td><td colspan="2">Кодировка строк в пользовательских данных (чтобы корректно конвертировать в Unicode, применяемый в PDF)</td><td>""</td>
  </tr>
  <tr class="odd">
    <td><b>title</b></td><td colspan="2">Заголовок документа (данные для соотв.атрибута PDF файла)</td><td>""</td>
  </tr>
  <tr>
    <td><b>description</b></td><td colspan="2">Описание документа (данные для соотв.атрибута PDF файла)</td><td>""</td>
  </tr>
  <tr>
    <td rowspan="4"><b>page</b></td><td colspan="3">Общие Параметры страницы:</td>
  </tr>
  <tr>
    <td><b>orientation</b></td><td>ориентация листа : 'P' (портретная) либо 'L' - ландшафтная</td><td>'P'</td>
  </tr>
  <tr>
    <td><b>size</b></td><td>Размер листа ('A4', 'A5' и т.д.)</td><td>'A4'</td>
  </tr>
  <tr>
    <td><b>units</b></td><td>В чем задаются координаты, размеры (высота, ширина)</td><td>'mm'</td>
  </tr>

  <tr><td class="topic" colspan="4">Секция "<b>baseparameters</b>"</td></tr>
  <tr>
    <td rowspan="3"><b>font</b></td><td colspan="3">Задание параметров базового шрифта (используется для полей, у которых атрибут font не указан)
    <br>Пример: &lt;font name="verdana" size="3.5" /&gt; </td>
  </tr>
  <tr>
    <td>атрибут <b>name</b></td><td>имя базового шрифта</td><td>arial</td>
  </tr>
  <tr>
    <td>атрибут <b>size</b></td><td>размер базового шрифта, в юнитах (mm)
    </td><td>4</td>
  </tr>
  <tr>
    <td rowspan="2"><b>margins</b></td><td colspan="3">Отступы от краев листа
    <br>Пример: &lt;margins left="10" top="5" right="10" bottom="2" /&gt; </td>
  </tr>
  <tr>
    <td>атрибуты <b>left,right, top, bottom</b></td><td>отступы слева, справа, сверху и снизу</td><td>0</td>
  </tr>

  <tr>
    <td rowspan="2"><b>templatefile</b></td>
    <td>Атрибут "<b>src</b>"</td>
    <td>передает имя основного PDF файла шаблона для всех страниц</td>
    <td>''</td>
  </tr>
<!--
  <tr>
    <td>Атрибут "<b>altsrc</b>"</td>
    <td>передает имя альтернативного PDF файла шаблона для всех страниц</td>
    <td>''</td>
  </tr>
-->
  <tr><td class="topic" colspan="4">Секция "<b>pages</b>" - включает набор блоков &lt;page&gt; ... &lt;/page&gt; - каждый задает список полей на одной странице</td></tr>

  <tr>
    <td rowspan="3"><b>template</b></td><td colspan="3">Тег &lt;template&gt; задает PDF файл, используемый в качестве шаблона (бланка) страницы
    <br>Пример: &lt;template src="template.pdf" page="1" /&gt; </td>
  </tr>
  <tr>
    <td>атрибут <b>src</b></td><td>имя (с путем) PDF файла. Если не указан, используется основной файл шаблона, указанный в секции baseparammeters</td><td></td>
  </tr>
<!--
  <tr>
    <td>атрибут <b>altsrc</b></td><td>имя (с путем) <a href="#alterpdf">альтернативного PDF файла шаблона</a></td><td></td>
  </tr>
-->
  <tr>
    <td>атрибут <b>page</b></td><td>Указывает номер страницы в данном PDF, используемой в качестве шаблона (нумерация начинается с 1).
    <br>Если используется PDF-шаблон, явное указание номера "копируемой" из него страницы обязательно (и не должно быть нулем) </td><td>0</td>
  </tr>

  <tr>
    <td rowspan="15"><b>field</b></td><td colspan="3">Задание параметров одного выводимого поля пользовательских данных
    <br>Пример: &lt;field name="cityname" posx="143" posy="26" /&gt; </td>
  </tr>
  <tr>
    <td>атрибут <b>name</b></td><td>имя поля: если в ассоциативном массиве пользователских данных есть элемент с соответствующим ключом, его значение выводится в указанных позициях страницы</td><td>--</td>
  </tr>
  <tr>
    <td>атрибут <b>type</b></td><td>"Тип" поля, задающий специфические лбъекты на PDF форме:<br>
     атрибут type="image" задает вывод изображения из файла (тег src указывает имя исходного файла),<br>
     type="checkbox" - при непустом значении переданных пользовательксих данных будет выводится символ "включенного" флажка (чек-бокса),
     при нуле - не выводится ничего.

     <br><b>type="poly"</b> позволяет вывести открытый полигон (ломаную линию), задав списки координат ее узловых точек. Атрибуты <b>posx</b>, <b>posy</b>
     должны содержать одинакокове число значений - позиций узловых точек полигона. (Если число Nx координат X меньше или больше чем Ny - координат Y, "лишние" значения игнорируются).

     <br>
     <b>type="qrcode", type="barcode"</b> - задают печать штрих-кодов и QR-кодов (см. подробнее <a href="#barcodes">ниже</a></td><td>--</td>
  </tr>
  <tr>
    <td>атрибуты <b>posx, posy</b></td><td>Задают позицию вывода на странице, в текущих юнитах (mm)<br>
    Атрибут posx может представлять список значений через запятую - подробнее см. <a href="#posx_array">ниже</a>.
    </td><td>0,0</td>
  </tr>
  <tr>
    <td>атрибуты <b>width, height</b></td><td>Задают предельную ширину и высоту для текстового значения. При необходимости выполняется авто-перенос длинных строк, чтобы оставаться в пределах указанной ширины, и обрезание текста при превышении высоты
    Для поля типа image задают ширину и высоту изображения (выполняется авто-масштабирование исходного файла). <br>
    <b>Внимание</b>: Если заданы оба параметра и их соотношение не равно соотношению ширины и высоты переданной картинки,
    при отображении в PDF она будет растянута или сжата.

    </td><td>0,0</td>
  </tr>
  <tr>
    <td>атрибут <b>charstep</b></td><td>Задает шаг (в текущих юнитах) между выводимыми символами строкового значения. При наличии этого атрибута строка данных разбивается на символы и они выводятся с указанным шагом по горизонтали.
    Полезно для точного вывода в напечатанные "квадратики" готового бланка, расчитанного на ручное "поклеточное" заполнение</td><td>0</td>
  </tr>
  <tr>
    <td>атрибут <b>maxlength</b></td><td>Ограничивает длину выводимой строки. Все символы после "maxlength"-го не будут напечатаны</td><td></td>
  </tr>
  <tr>
    <td>атрибут <b>font</b></td><td>Задает имя шрифта. Если не указан или пустая строка, используется "базовый" шрифт</td><td></td>
  </tr>
  <tr>
    <td>атрибут <b>size</b></td><td>Задает размер шрифта. Если не указан или пустая строка, используется "базовый" размер</td><td>0</td>
  </tr>
  <tr>
    <td>атрибут <b>color</b></td><td>Цвет символов. Может передаваться в любой нотации, поддерживаемой в TCPDF ("rgb(n1,n2,n3)", базовое название цвета, 3х- или 6-значный Hex-код). Если не указан или пустая строка, используется черный
    <br>Можно задать имя функции (предварив знаком "@"), чтобы цвет формировался "на лету" : "@MyColorFunction"
    </td><td></td>
  </tr>
  <tr>
    <td>атрибут <b>bgcolor</b></td><td>Цвет фона под выводимыми данными. Может передаваться в любой нотации, поддерживаемой в TCPDF.
    <br>Можно задать имя функции (предварив знаком "@"), чтобы цвет формировался "на лету" : "@MyColorFunction". При указании цвета фона рисуется прямоугольник заданного цвета, а уже поверх него выводится
    собственно значение данных. Поэтому важно, чтобы вместе с атрибутом <b>bgcolor</b> были переданы <b>width</b> и <b>height</b>, иначе ширина и высота прямоугольника будет считаться "нулевой".
    <br>Этим атрибутом можно пользоваться, если надо закрасить некую область страницы и поверх вывести свой текст.
    </td><td></td>
  </tr>
  <tr>
    <td>атрибут <b>align</b></td><td>Выравнивание текста по горизонтали. Возможные значения (L,R,C,J) - в соответствии с требованиями к параметру align в методах класса TCPDF</td><td></td>
  </tr>
  <tr>
    <td>атрибут <b>options</b></td><td>Строка дополнительных опций, интерпретируемых в зависимости от типа поля
    <br>Можно задать имя функции (предварив знаком "@"), тогда набор "опций" будет формироваться "на лету", непосредственно перед выводом в PDF : "@MyOptionsFunction"
    </td><td>--</td>
  </tr>

  <tr>
    <td>атрибут <b>src</b></td><td>имя (с путем) графического файла, для поля иипа "image". О поддерживаемых типах файлов см. документацию к классу TCPDF</td><td></td>
  </tr>
  <tr>
    <td>атрибут <b>rotate</b></td><td>Задает угол поворта текста/картинки/штрих-кода (в град., против часовой стрелки)</td><td>0, 0</td>
  </tr>

</table>

<br><br>Одно значение пользовательских данных может быть выведено на странице неоднократно, для чего достаточно в XML-описании внести несколько блоков &lt;field ... &gt;
с одним и тем же именем поля (атрибут <b>name</b>).

<a name="posx_array"></a>
<h4>Использование массива координат posx</h4>
Как уже упоминалось, с помощью атрибута charstep можно выполнить "разреженный" вывод символов строки, с указанным шагом в миллиметрах
между буквами. Однако может возникнуть необходимость вывода с "переменным" шагом или даже с пропуском определенных символов в строке.
Например, мы хотим вывести дату, переданную в формате "ДД.ММ.ГГГГ" в шесть "квадратиков, избегая точек и беря от года только две последние цифры.
В этом случае значение posx задается примерно в таком виде:
<br>
<pre>&lt;field name="date_entered" ... posx="50,54,0,70,74,0,0,0,90,94" /&gt;</pre>
<br><br>
С помощью нулевого значения мы "гасим" вывод соответствующего символа строки - таким образом мы подавили вывод точек и первых двух цифр года,
а остальные цифры вывели точно в нужные места на бланке. Т.к. мы указали только десять координат posx, все остальные символы пользовательского значения,
начиная с одиннадцатого, будут проигнорированы.

<br><br>
<b>LoadConfig([$cfgname])</b> - загружает конфигурацию из файла с указанным именем. Если имя XML файла не было передано в конструктор класса,
то здесь можно загрузить описание формата "явным" способом (после вызова метода-конструктора). Вместо имени файла можно также передать готовую XML-строку.

<!-- <br><br>
<b>SetAltTemplate($alt=true)</b> - подменяет "основной" PDF файл шаблона альтернативной версией.

<br><br>
<a name="alterpdf"></a>В чем смысл альтернативного файла PDF ?

<br><br>
Наличие альтернативной версии шаблона позволяет "на лету" переключить вид генерируемого документа, в зависимости от конкретной
ситуации: например, "основной" шаблон может содержать полный дизайн бланка договора, позволяющий напечатать его на чистом листе бумаги.
Но что если вам нужно напечатать только "данные", на готовом типографском бланке, который уже содержит все логотипы, шапки и прочее ?
Здесь и помогает альтернативный шаблон :
<br>подготовив "очищенный" шаблон и вызвав перед генерацией метод SetAltTemplate(), вы обеспечите создание PDF документа "поверх" этого "альтернативного" шаблонного PDF.
-->

<br><br>
<b>addPageDef($opts=array())</b> - программное добавление описания страницы (в дополнение к настроечному XML файлу). Нужно приготовить ассоциативный массив
со всеми необходимыми параметрами, и передеать его в функцию:

<br>
<b>$opts['template']</b> - ассоциативный массив, описывающий source PDF file parameters to use as "template" for the page (See template attributes for all supported values)
<b>$opts['fields']</b> - ассоциативный массив, описывающий all fields on this page (See "field" attributes for all supported values)<br>
<b>$opts['repeat']</b> - массив, описывающий <a href="#f_repeat">"повторение"</a> данных на странице (эквивалентен тегу "repeat" в настроечном XML файле)

<br><br>
<b>AddFieldDefinition($ipage, $parm)</b> программно добавляет описание одного выводимого поля данных для страницы с заданным номером.
<br>$ipage - номер страницы, $parm - ассоциативный массив с описанием поля, где ключи элементов должны точно соответствовать перечисленным
выше атрибутам тега field - posx, posy, type, и т.д.

<br><br>

<b>setTitle($strg)</b> задает значение для атрибута Title (заголовок) в выходном PDF.

<br><br>
<b>setSubject($strg)</b> задает значение для атрибута Subject (тема).

<br><br>
<b>setAuthor($strg)</b> задает значение для атрибута Author (автор).

<br><br>
<b>setCreator($strg)</b> задает значение для атрибута Creator.

<br><br><a name="disableImages"></a>
<b>disableImages($par=true)</b> - полностью отключает вывод всех изображений в документе.
 Полезно, например, если в режиме тестирования нужно спрятать оттистки печати, факсимиле подписи руководителя и т.д.

<br><br>
<b>AddData($entitydata)</b> добавление массива данных для печати страницы (или блока страниц, если текущее XML-описание задает многстраничный документ).
<br>
Возможен многократный вызов метода AddData() перед финальным вызовом Render() :
<br><br>каждый вызов метода AddData() означает добавление новой страницы либо блока страниц в генерируемый документ.
Т.е. один вызов AddData() соответствует одному полному документу. Каждый последующий вызов будет добавлять новый "полный" документ в генерируемый файл.

<br><br>
Таким образом с помощью одного вызова метода Render() можно создать PDF файл, содержащий несколько экземпляров готовых документов -
например, заполненные договоры для нескольких человек, чьи данные были переданы в нескольких вызовах AddData().
<br>Массив передаваемых данных должен иметь ту же структуру, что и в конструкторе класса (ассоциативный массив с ключами, соответствующими именам полей).

<br><br>
<b>DrawMeasuringGrid($step = 10, $color = false)</b> - отладочная функция : в процессе настройки вывода полей на бланк (координат и размеров областей печати)
может пригодиться координатная сетка, которая распечатывается поверх текущего бланка.
<br>Данный метод инициирует ее вывод, с указанным шагом $step, и цветом $color. Если шаг не указан, используется 10мм, если указано значение "1" или TRUE,
это интерпретируется не как 1 мм, а "да" - печатать сетку, и шаг также будет "дефолтным" 10мм. Цвет сетки по умолчанию - серый (RGB: 80,80,80).
Цвет можно передать как массив из трех Int-значений (R,G,B), либо одно целочисленное значение N (получится монохромный RGB(N,N,N)), либо в CSS-нотации ("#rrggbb","#rgb").

<br><br><b>addPluginData($name, $data)</b> : передает данные, которые должны быть "отрисованы" с помощью плагина.
Подробности см. в <a href="#plugins">описании плагинов</a>.

<br><br><a name="setResourcePaths"></a>
<b>setResourcePaths($pdfPath=null, $imgPath=null)</b> : по умолчанию printformPdf ищет все PDF шаблоны и файлы картинок от текущей папки.
Но иногда эти "ресурсы" могут храниться в отдельной папке, например в "resources/" . Если вы не хотите в каждом атрибуте "src" писать одни и те же длинные пути,
можно воспользоваться данной функцией и один раз указать точное местоположение файлов.
<br>Первый параметр <b>$pdfPath</b> задает папку для PDF шаблонов, а <b>$imgPath</b> - папку для исходных изображений.

<br><br><b>Render($output=true)</b> : метод выполняет собственно генерацию выходного PDF файла, и, по умолчанию, тут же выдает его содержимое в "поток"
 клиенту (либо, в зависимости от режима вывода, сохраняет на сервере, под заданным именем).
 Если передать параметр $output равный нулю (или FALSE), вывод/сохранение не производится, и объект остается открытым для дальнейших операций записи.
 Это может быть нужно, если после генерации "основной части" вы хотите что-либо добавить прямыми вызовами методов класса TCPDF
 (и только потом сохранить конечный результат). Для получения TCPDF-"хендлера" (точнее, ссылки на TCPDF-объект)
 служит метод <b>getPdfObject()</b>. По окончании собственных манипуляций, для вывода/сохранения результата остается
 самостоятельно вызвать метод <b>Output()</b> (не забывайте делать это, иначе никакого PDF создано не будет).

<pre>// Нарисуем горизонтальную линию
$pdf = new CPrintFormPdf(...);
...
$pdf-&gt;AddData($mydata);
$pdf-&gt;Render(false);
$tcpdf = $pdf-&gt;getPdfObject();
$tcpdf-&gt;Line(10,100,190, 100);
$pdf-&gt;Output(); // финал: закрываем PDF и посылаем клиенту (или сохраняем на диск)
</pre>

<a name="barcodes"></a>
<h4>Вывод штрих-кодов</h4>
Благодаря тому, что классы TCPDF поддерживают печать штрих-кодов многих типов, в настоящем классе также реализована
 такая функция, при помощи описания поля с типом "barcode"
<pre>Фрагмента XML с описанием поля "штрих-код"
      ...
      &lt;field name="barcode_crc" type="barcode:C128" posx="10"  posy="180" width="40" height="10" options="border,text" color="#EE4040"/&gt;
      ...
</pre>
В атрибуте type="..." указывается тип "barcode", далее - любой символ разделителя (у нас в примере - двоеточие) и тип желаемого штрих-кода.
Тип должен быть одним из имен, поддерживаемых классами TCPDF. Если тип не указан, по умолчанию принимается "C39".
<br>
Для версии TCPDF 5.9.109 допустимы следующие типы штрихкода (список неполный, приводится для примера) :<br>
C39, C39+, C39E, C39E+, C93, S25, S25+, I25, I25+, C128, C128A, C128B, C128C, EAN2, EAN5, EAN8, ...

<br><br>
Полный список поддерживаемых типов смотрите в документации и исходных кодах комплекта TCPDF.

<br><br>
Атрибут options для штрих-кода должен быть строкой, содержащей разделенные запятой необходимые значения из следующего списка:
<table><tr><th>Название</th><th>назначение</th></tr>
  <tr><td>border</td><td>Включает рисование рамки вокруг штрих-кода</td></tr>
  <tr><td>text</td><td>Включает вывод текста с исходным кодом внизу штриховой области (по умолчанию печатается только штрих-код)</td></tr>
</table>
Атрибуты color, rotate, width, height влияют на выводимый штрих-код очевидным образом. При задании ширины (width) надо иметь в виду, что при слишком
малой ширине и большом кодируемом тексте штрих-код может оказаться нечитаемым сканерами, из-за потери качества.

<br><br>
<a name="qrcodes"></a>

<h4>Вывод QR-кодов</h4>
При задании в описании поля атрибута "type" равным "qrcode", значение данного поля кодируется в QRcode, размерами width x height,
атрибуты цвета и поворота (color, rotate) так же влияют на вывод, как и в случае штрих-кодов. Для QRcode также надо задавать минимальные размеры области
кода с учетом длины кодируемой строки данных, иначе можно получить "битый" (нечитаемый) код.

<a name="f_repeat"></a>
<h4>Размножение (дублирование) данных на странице : тег repeat</h4>

Что если вам нужно на одной странице многократно вывести один и тот же блок данных ? Наглядный пример - печать визитных карточек.
Конечно, можно создать описание, где будут повторены все блоки полей, с соответствующей подгонкой координат вывода.
Неудобства такого подхода очевидны: чтобы передвинуть или добавить одно поле, нужно менять (добавлять) его описание во всех дублирующих блоках описания,
пересчитывать координаты вывода с учетом смещения от "первого экземпляра" выведенных данных.
<br><br>Для решения этой задачи есть специальный тег repeat, задающий смещение по горизонтали (offset_x) и вертикали (offset_y) по отношению
к координатам "исходного" блока данных.

<br><br>Как работает repeat ?
<br>Все элементы вывода (текстовые поля, штрих-коды, изображения), описанные на данной странице, считаются одним блоком данных, и он полностью
выводится на этой же странице, с указанным смещением по X и Y. Допустимо на одной странице задавать несколько тегов repeat, чтобы сделать несколько копий
блока данных. Ниже приводится пример XML-описания для печати визитных карточек, включая служебные "уголки", по которым потом следует разрезать
лист.

<br><br><b>Примечение</b>: Чтобы исключить какое-либо поле из "повтора", в список его атрибутов (в описании этого поля) нужно добавить <b>norepeat="1"</b>.

<pre>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;printdef&gt;
  &lt;version modified="2012-11-02"&gt;1.0&lt;/version&gt;
  &lt;title&gt;Visit card template&lt;/title&gt;
  &lt;baseparameters&gt;
    &lt;margins left="0" top="0" right="0" bottom="0" /&gt;
    &lt;font name="arial" size="8" /&gt;
    &lt;page orientation="P" size="A4" units="mm" /&gt;
  &lt;/baseparameters&gt;

  &lt;pages&gt;
   &lt;page&gt;
   &lt;template page="1" /&gt;
    &lt;field name="corner1" type="poly" posx="10,10,14" posy="14,10,10" color="#AAA" /&gt;
    &lt;field name="corner2" type="poly" posx="91,95,95" posy="10,10,14" color="#AAA" /&gt;
    &lt;field name="corner3" type="poly" posx="10,10,14" posy="61,65,65" color="#AAA" /&gt;
    &lt;field name="corner4" type="poly" posx="91,95,95" posy="65,65,61" color="#AAA" /&gt;

    &lt;field name="logo" type="image" posx="12" posy="12" width="26" height="26" src="logo.png" /&gt;
    &lt;field name="lastname" posx="45" posy="20" width="35" color="#008" size="14" /&gt;
    &lt;field name="firstname" posx="45" posy="28" width="35" size="12"/&gt;
    &lt;field name="middlename" posx="45" posy="35" width="35"  size="12" /&gt;
    &lt;field name="duty"       posx="45" posy="42" width="35" size="7"/&gt;
    &lt;field name="phones"     posx="15" posy="52" width="75" align="C" size="7"/&gt;
    &lt;!-- duplicate card on the page --&gt;
    &lt;repeat offset_x="88" offset_y="0" /&gt;
    &lt;repeat offset_x="0" offset_y="57" /&gt;
    &lt;repeat offset_x="88" offset_y="57" /&gt;
    &lt;repeat offset_x="0" offset_y="114" /&gt;
    &lt;repeat offset_x="88" offset_y="114" /&gt;
    &lt;repeat offset_x="0" offset_y="171" /&gt;
    &lt;repeat offset_x="88" offset_y="171" /&gt;
    &lt;repeat offset_x="0" offset_y="228" /&gt;
    &lt;repeat offset_x="88" offset_y="228" /&gt;

   &lt;/page&gt;
  &lt;/pages&gt;
&lt;/printdef&gt;
</pre>
Подготовив такое описание в XML файле (с именем, допустим, "pdf-card.xml"), мы легко можем вывести нашу визитную карточку со своими данными:
<br>(В нашем случае в качестве логотипа компании выводится файл "logo.png" - убедитесь, что он есть в текущей папке!)
<pre>
$pdfOptions = array('outname' =&gt;'mycard.pdf', 'configfile' =&gt; 'pdf-card.xml');
$pdf = new CPrintFormPdf($pdfOptions);
$data = array(
     'lastname'=&gt;'Stivenson'
    ,'firstname'=&gt;'Alex'
    ,'middlename'=&gt;'Jr'
    ,'duty'=&gt;'Senior Sales Manager'
    ,'phones'=&gt;'+1(555)111-2200, 111-2233'
);
$pdf-&gt;AddData($data);
$pdf-&gt;Render();

</pre>

<a name="apfields"></a>
<h4>Поля, выводимые на всех страницах</h4>

Иногда возникает нужда вывести один и тот же текст, картинку, штрих-код на всех станицах документа - в одни и те же координаты, одним и тем же цветом, шрифтом т т.д.
Конечно, можно в описание каждой страницы воткнуть один и тот же тег &lt;field&gt;. Но очевидно, было бы удобнее задать параметры такого вывода один раз.
Для этого введена поддержка секции "allpages". Она располагается внутри корневого элемента XML файла и содержит стандартные описания полей - в тегах &lt;field&gt;
<br>
Ниже пример оформления (внизу всех страниц выводим штрих-код):
<pre>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;printdef&gt;
  &lt;version&gt;1.0&lt;/version&gt;
  &lt;title&gt;Testing PDF generation&lt;/title&gt;
  &lt;allpages&gt;
    &lt;field name="bar_code01" type="barcode" posx="100" posy="280" width="50" height="5" options="text" value="012345678" /&gt;
  &lt;/allpages&gt;
  ...
&lt;/printdef&gt;
</pre>
Единственное отличие у тега field в данном случае: в атрибуте value можно сразу указать, какой текст (значение) будет выводиться в данном поле.
В любой момент его можно будет изменить с помощью вызова метода setAllPagesFieldValue(), либо просто задав другое значение в наборе данных, передаваемых
в методе addData(). Учтите, что поле с таким же именем в наборе данных будет иметь приоритет над значением, заданным в атрибуте value (или установленным с помощью
setAllPagesFieldValue() ).

<br><br>Есть также public метод <b>addAllPagesField</b>($fdef, $value=null), вызов которого эквивалентен наличию секции field в блоке allpages XML-файла настроек.

<br><br>
<a name="plugins"></a>
<h4>Поддержка плагинов</h4>

Начиная с версии 1.1 printform-pdf поддерживает подключение плагинов. Для этого объявлен новый абстрактный класс, <b>PfPdfPlugin</b>,
который является "скелетом" всех плагинов для класса CPrintformPdf.

<br><br>
В контексте работы в CPrintformPdf плагин выполняет некую "сложную" отрисовку внутри прямоуголной области, задаваемой начальными координатами, шириной и высотой.

В классе плагина, (наследующем от абстрактного PfPdfPlugin), вы должны написать реализацию двух методов:
<br><br>
<b>__construct($tcpdfobj, $cfg = null, $x=0, $y=0, $w=0, $h=0)</b> - конструктор класса, который должен принимать в качестве
параметров ссылку на объект TCPDF (через который он будет выводить все примитивы на PDF-страницу),
 массив настроечных параметров ($cfg), и координаты и размеры области вывода ($x,$y - начальные координаты, $w - ширина, $h - высота, в миллиметрах).

<br><br><b>Render($data)</b> - основной метод, который собственно и производит вывод в в пределах указанной области. $data - пользовательские данные,
которые предполагается "визуализировать".

<br><br>Для корректной работы плагина, его надо подключать в своем коде ПОСЛЕ модуля  printform-pdf.php:

<pre>
require_once('printform-pdf.php');
require_once('my-plugin.php');
</pre>

Далее, нужно добавить в настроечный XML-файл описание "поля" типа "plugin" :

<pre>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;printdef&gt;
  ...
  &lt;pages&gt;
   &lt;page&gt;
      &lt;template page="1" /&gt;
      &lt;field name="cityname" posx="143" posy="26" /&gt;
      &lt;field name="personname" posx="42" posy="26" /&gt;
      &lt;field name="person_firstname" posx="88" posy="26" width="20" /&gt;
      &lt;field name="person_birthdate" posx="42" posy="32" width="70" /&gt;
      &lt;field name="person_document" posx="143" posy="32" width="55" /&gt;
      <b>&lt;plugin name="chart_gantt" type="my_plugin_classname" posx="10"  posy="160" width="180" height="80"
        options="dateformat=d.m,descr_width=0.25,arrow_color=#F22,shade_color=#BBB" /&gt;</b>
   &lt;/page&gt;
  &lt;/pages&gt;
&lt;/printdef&gt;
</pre>

Заметьте, что значение атрибута "type" ("my_plugin_classname" в нашем случае) должно быть именем нашего класса, наследующего от PfPdfPlugin.
CPrintformPDF считает элемент "plugin" специфическим полем вывода (вот почему его описание находится среди других полей внутри области page) :
<br>вывод этого "поля" осуществляется в том порядке, в каком оно находится в списке полей, и к нему применяются значения необязательных атрибутов
"bgcolor" и "rotate" (таким образом, плагин будет выводить поверх закрашенной области, и с нужным поворотом, если он задан).

<br><br>
Наконец, где-то в коде вывода PDF-документа нужно подготовить данные для плагина и передать их в объект CPrintformPdf с помощью метода
<b>setPluginData($name, $data)</b>, ДО вызова финального CPrintformPdf::Render().
<br>
<br><b>$name</b> должно соответствовать имени нашего "псевдо-поля" plugin-типа, как оно указано в атрибуте "name" attribute в теге "plugin".
<br><b>$data</b> массив (или объект) с вашими данными. Его тип и структура полностью зависят от вас, т.к. это ваш плагин, не так ли ?

<br><br>Когда доходит очередь до печати Plugin-поля, CPrintformPdf пытается создать объект вашего класса, передав в конструктор экземпляр TCPDF,
текущие параметры конфигурации и данные для визуализации.

<br><br>
Параметры конфигурации - это ассоциативный массив, который создается как комбинация текущих настроечных параметров экземпляра CPRintformPdf
(включая значение кодовой страницы входных строк - "stringcharset") и опций, заданных
в атрибуте "<b>options</b>" тега plugin. Значение атрибута "options" должно быть набором разделенных запятыми пар вида "optname=value".
Эта строка разбирается и заносится в массив соответствующими парами ключ-значение ($options = array('optname =&gt; 'value',...) ), и итоговый
массив передается в конструктор плагина.

<br><br>Ниже приведен пример реализации простого плагина, рисующего прямоугольную рамку.
<pre>
class PfPdf_Gantt extends PfPdfPlugin {
    private $_config = array();
    private $tcpdf_obj = null;
    private $xpos,$ypos,$width,$height;
    public function __construct($pdfobj, $config=null, $x=0,$y=0,$w=0,$h=0) {
        $this-&gt;tcpdf_obj = $pdfobj;
        $this-&gt;xpos = $x;
        $this-&gt;ypos = $x;
        $this-&gt;width = $w;
        $this-&gt;height = $h;
        $this-&gt;_config = $config;
    }
    public function Render($data) { // just draw a rectangle
        $this-&gt;tcpdf_obj-&gt;Rect($this-&gt;xpos,$this-&gt;ypos,$this-&gt;width,$this-&gt;height,'D');
    }
}
</pre>

<br>Реальный рабочий плагина можно найти на этом сайте, поискав по строке "pdf_gantt".
Это класс, выводящий графики Ганта, он может работать как самостоятельный модуль (вместе с TCPDF!), так и в качестве плагина класса CPrintformPdf.

<h4>Бонус-Функции</h4>

<br><br>
<a name="AddPageLined"></a>
<b>AddPageLined($title='',$options=null)</b> создает чистую "разлинованную" страницу (в горизонтальную/вертикальную линейку или в клетку) с заданными параметрами.
<br><br><b>$title</b> - необязательный заголовок, печатается вверху страницы.
<br><br><b>$options</b> : если передан, должен быть ассоциативным массивом, ниже список возможных элементов:
<table>
 <tr>
   <th>Элемент</th><th>Назначение</th>
 </tr>
 <tr>
   <td nowrap="nowrap"><b>$options['step_y']</b></td><td> шаг сетки по вертикали (указывается только в мм). Если не передан, принимается значение 5 мм.</td>
 </tr>
 <tr>
   <td nowrap="nowrap"><b>$options['step_x']</b></td><td> шаг сетки по горизонтали. Если не передан, приравнивается к шагу по вертикали. Чтобы явно задать режим "только горизонтальные линейки",
     надо явно задать нулевое значение для step_x. (Аналогично можно заказать печать только вертикальных линеек)</td>
 </tr>
 <tr>
   <td nowrap="nowrap"><b>$options['color']</b></td><td> цвет линий. По умолчанию - серый, RGB(180,180,180)</td>
 </tr>
</table>

<br><br>
Пример печати клетчатого листа:
<pre>
$pdf = new PrintFormPdf;
$pdf-&gt;AddPageLined('Lined page title',
    array(
        'step_y'=&gt;12
       ,'step_x'=&gt;12
       ,'color'=&gt;'red'
   )
);
</pre>

<br><br>Есть еще один способ применения метода AddPageLined() - вывод "миллиметровой бумаги".
Для этого достаточно вызвать метод с такими параметрами:
<pre>
<br>$obj-&gt;AddPageLined('','mm'); // выводится "серая" миллиметровка, цвет линий - RGB(180,180,180)
// или другой способ, если нужно задать свой цвет миллиметровой сетки:
$obj-&gt;AddPageLined('', array('mm'=&gt;true, 'color'=&gt;array(20,200,20)));
</pre>
<br><br><a name="AddPageMusicStaff"></a>
<b>AddPageMusicStaff($title='',$options=null)</b> рисует чистый нотный лист.
<br>
При вызове без параметров выводится лист без заголовка, содержащий 10 отдельных нотных станов (цвет линий - черный) без тактовых линеек-разделителей.
<br><br>
<b>$title</b> - заголовок страницы
<br>Массив $options:
<table>
  <tr>
    <th>Элемент</th><th>Назначение</th>
  </tr>
  <tr>
    <td nowrap="nowrap"><b>$options['merged_staves']</b></td><td>кол-во "соединенных" нотных станов. При указании ненулевого числа N нотные станы соединяются в блоки по N шт.</td>
  </tr>

  <tr>
    <td nowrap="nowrap"><b>$options['measures']</b></td><td>кол-во тактов в строке. При заданном непустом значении от 2х и выше будут выводиться "тактовые черты", делящие стан на соответствующее число тактов.</td>
  </tr>
  <tr>
    <td nowrap="nowrap"><b>$options['step_roll']</b></td><td>Вертикальный шаг, с которым выводятся нотные станы (расстояние между первыми линейками соседних нотных станов), мм. По умолчанию - 27 мм.</td>
  </tr>
  <tr>
    <td nowrap="nowrap"><b>$options['step_line']</b></td><td>Расстояние между соседними линейками одного нотного стана, мм. По умолчанию - 2 мм.</td>
  </tr>
  <tr>
    <td nowrap="nowrap"><b>$options['accolade']</b></td><td>Ненулевое значение включит вывод акколады, объединяющей нотные станы одной группы (только при параметре merged_staves больше 1)</td>
  </tr>
  <tr>
    <td nowrap="nowrap"><b>$options['color']</b></td><td>Цвет линий. По умолчанию - черный, RGB(0,0,0)</td>
  </tr>

</table>

<br><br><a name="AddPageSudoku" id="AddPageSudoku"></a>
<b>AddPageSudoku($title='', $level=false, $options=null)</b> выводит страницу паззлов Судоку, в зависимости от переданных параметров
выводится либо чистый шаблон, либо сгенерированные случайным образом пазлы заданного уровня сложности. Для генерации пазла используется класс <a href="http://www.phpclasses.org/package/2674-PHP-Generate-and-solve-sudoku-puzzles.html">class.Sudoku.php</a>
автора <a href="http://www.phpclasses.org/professionals/profile/280/">Richard Munroe</a>.
<br><b>$title</b> - необязательный заголовок страницы.
<br><b>$level</b> - уровень сложности генерируемых головоломок, целое число от 1 до 10. Если параметр не передан или нулевое значение, выводятся чистые "бланки" пазлов.
Ввиду особенностей алгоритма генерации Судоку некоторые блоки пазла могут оказаться незаполненными (если не удалось сформировать комбинацию
"открытых" ячеек за предельное число итераций).

<br>Необязательный третий параметр, ассоциативный массив $options можно использовать для настройки цвета:
<br><br>
<table>
  <tr>
    <th>Элемент</th><th>Назначение</th><th>По умолчанию</th>
  </tr>
  <tr>
    <td nowrap="nowrap"><b>$options['color_grid']</b></td><td>цвет линий, формирующих поле головоломки.</td><td>черный - RGB(0,0,0)</td>
  </tr>
  <tr>
    <td nowrap="nowrap"><b>$options['color_cell']</b></td><td>цвет цифр в ячейках</td><td>черный - RGB(0,0,0)</td>
  </tr>
</table>

<h4>Возможные проблемы</h4>

1. Не удается загрузить исходный PDF-шаблон. TCPDF выводит предупреждение.
<br>
Скорее всего, вы используете исходный файл, сжатый одним из алгоритмов, не поддерживаемых классами FPDF / FPDFI.
Модули на PHP очевидно могут "не понимать" какие-то новые "фичи" формата PDF.
Сохраните свой шаблонный PDF в режиме без сжатия.


<H4>История изменений</H4>

<h5>1.4.0023 (16.04.2014)</h5>
<ul>
  <li>Добавлена поддержка <a href="#apfields">"All Pages Fields"</a> (поля, выводимые на все страницы)</li>
  <li>Добавлена функция <a href="#setResourcePaths">setResourcePaths()</a> </li>
</ul>

<h5>1.3.0020 (2014-02-01)</h5>
<ul>
  <li>Добавлена функция <a href="#disableImages">disableImages()</a> </li>
  <li>Добавлена поддержка тега <a href="#f_repeat">repeat</a> (дублирование данных на странице со сдвигом)</li>
</ul>

<h5>1.2 (2013-12-10)</h5>
<ul>
  <li>Добавлена функция <a href="#addPageDef">addPageDef()</a>, для программной загрузки описания страницы</li>
</ul>

<h5>1.1.0017 (22.05.2013)</h5>
<ul>
  <li>bugfix: работа класса вызывает ошибку при вызове convertHTMLColorToDec() , из-за того, что TCPDF 6.x перенес эту функцию в отдельный класс TCPDF_COLORS </li>
</ul>

<h5>1.1 (26.04.2013)</h5>
<ul>
  <li>new: добавлена поддержка плагинов (абстрактный класс PfPdfPlugin)</li>
</ul>

<h5>1.00 (14.11.2012)</h5>
<ul>
  <li>Первая публикация</li>
</ul>

<!-- DOC END -->

<br /><br />
<div style="text-align:right">Распространяется по лицензии: BSD License</div>

<br />
<hr>

<div align=center><font size=-2>Copyright &copy; 2012-2013 Alexander Selifonov, <a href="http://www.selifan.ru">www.selifan.ru</a>
</font></div>
</body></html>
